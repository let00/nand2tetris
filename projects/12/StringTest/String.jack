// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field int maxLength;
    field Array str;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLen) {
        if (maxLen > 0) {
            let str = Array.new(maxLen);
        }

        let maxLength = maxLen;
        let length = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLength > 0) {
            do str.dispose();
        }

        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | ~(j < maxLength)) {
            return;
        }

        let str[j] = c;

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (~(length < maxLength)) {
            return this;
        }

        let str[length] = c;
        let length = length + 1;

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            return;
        }

        let str[length] = 0;
        let length = length - 1;

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, ret, sign;
        var char c;

        let i = 0;
        let ret = 0;
        let sign = 1;
        if (str[0] = 45) {
            let sign = -1;
            let i = 1;
        }

        while (i < length) {
            let c = str[i];
            if ((c < 48) | (c > 57)) {
                return ret;
            }

            let ret = (ret * 10) + (c - 48);
            let i = i + 1;
        }

        return ret * sign;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;

        if (val < 0) {
            do appendChar(45);
            do setPositiveInt(-val);
        } else {
            do setPositiveInt(val);
        }

        return;
    }

    method void setPositiveInt(int val) {
        var int newVal;

        if (val < 10) {
            do appendChar(48 + val);
            return;
        }

        let newVal = val / 10;
        do setPositiveInt(newVal);
        do appendChar(48 + val - (newVal * 10));
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
