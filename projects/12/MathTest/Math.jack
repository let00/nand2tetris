// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    static int qy2;

    /** Initializes the library. */
    function void init() {
        var int i;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
        while (i < 16) {
            let twoToThe[i] = 2 * twoToThe[i - 1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return (-x);
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;

        let sum = 0;
        let shiftedX = x;
        let i = 0;

        while (i < 16) {
            if (Math.bit(y, i) = true) {
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        if ((x = 0) | (y = 0)) {
            return 0;
        }

        if (((x > 0) & (y < 0)) | ((x < 0) & (y > 0))) {
            return -Math._divide(Math.abs(x), Math.abs(y));
        }
    
        return Math._divide(x, y);
    }

    function int _divide(int x, int y) {
        var int q;

        if ((y > x) | (y < 0)) {
            let qy2 = 0;
            return 0;
        }

        let q = Math._divide(x, y + y);

        if ((x - qy2) < y) {
            return q + q;
        } else {
            let qy2 = qy2 + y;
            return q + q + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int left, right, mid, midSquared;

        if ((x < 0) | (x = 0)) {
            return 0;
        }

        let left = 0;
        let right = 181;
        while (left < right) {
            let mid = left + ((right - left) / 2);
            let midSquared = mid * mid;

            if (midSquared = x) {
                return mid;
            }

            if (midSquared < x) {
                let left = mid + 1;
            } else {
                let right = mid - 1;
            }
        }

        return left;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }

    function boolean bit(int x, int i) {
        if ((twoToThe[i] & x) = 0) {
            return false;
        } else {
            return true;
        }
    }
}
