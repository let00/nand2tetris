// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array twoToThe;
    static int screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        var int i;

        let color = true;
        let screen = 16384;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
        while (i < 16) {
            let twoToThe[i] = 2 * twoToThe[i - 1];
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;
        while( i < 8192 ) {
            let screen[i] = 0;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, mask;

        let address = screen + (32 * y) + (x / 16);
        let value = Memory.peek(address);

        let mask = twoToThe[x & 15];

        if (color) {
            do Memory.poke(address, value | mask);
        } else {
            do Memory.poke(address, value & ~mask);
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int tmp, a, b, dx, dy, diff, yDir;

        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);

        if (dy = 0) {
            do Screen.drawHorizontalLine(y1, x1, x2);
            return;
        }

        if (dx = 0) {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }

        if (x2 < x1) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        } 
        if (y2 < y1) {
            let yDir = -1;
        } else {
            let yDir = 1;
        }
        let a = 0;
        let b = 0;
        let diff = 0;

        while ((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel(x1 + a, y1 + (b * yDir));

            // b/a < dy/dx => b*dx - a*dy < 0, then go up/down. let diff = b*dx - a*dy
            if (diff < 0) {
                let b = b + 1;
                let diff = diff + dx;
            } else {
                let a = a + 1;
                let diff = diff - dy;
            }
        }

        return;
    }

    function void drawHorizontalLine(int y, int x1, int x2) {
        var int tmp;
        
        if( x1 > x2 ) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
        }

        while (~(x1 > x2)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }

        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int tmp;
        
        if( y1 > y2 ) {
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        while (~(y1 > y2)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int tmp;
        
        if( y1 > y2 ) {
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        while (~(y1 > y2)) {
            do Screen.drawHorizontalLine(y1, x1, x2);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx;

        if (r > 181) {
            return;
        }

        do Screen.drawHorizontalLine(y, x - r, x + r);
        let dy = 1;

        while (~(dy > r)) {
            let dx = Math.sqrt((r*r) - (dy*dy));
            do Screen.drawHorizontalLine(y + dy, x - dx, x + dx);
            do Screen.drawHorizontalLine(y - dy, x - dx, x + dx);
            let dy = dy + 1;
        }
        
        return;
    }
}
