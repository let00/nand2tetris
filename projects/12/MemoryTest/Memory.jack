// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array curr;

        let curr = heap;
        while (~(curr = 0) & (curr[1] < (size + 2))) {
            let curr = curr[0];
        }

        if (curr = 0) {
            do Memory.deFrag();
            return Memory.alloc(size);
        } else {
            let curr[1] = curr[1] - (size + 2);
            let curr = curr + 2 + curr[1];
            let curr[0] = 0;
            let curr[1] = size;
            return curr + 2;
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array curr;

        let curr = heap;
        while (~(curr[0] = 0)) {
            let curr = curr[0];
        }

        let curr[0] = o - 2;
        return;
    }

    function void deFrag() {
        var Array curr, next;

        let curr = heap;
        while (~(curr[0] = 0)) {
            if ((curr + 2 + curr[1]) = curr[0]) {
                let next = curr[0];
                let curr[0] = next[0];
                let curr[1] = next - curr - 2;
            } else {
                let curr = curr[0];
            }
        }

        return;
    }
}
